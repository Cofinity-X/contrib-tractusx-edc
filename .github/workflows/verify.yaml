#################################################################################
#  Copyright (c) 2023 Mercedes-Benz Tech Innovation GmbH
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Verify"

on:
  workflow_call:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  verify-helm-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run -v ${{ github.workspace }}/charts:/helm-docs jnorwood/helm-docs helm-docs
          
          if $(git diff --quiet --exit-code); then
            echo "Helm chart docs up to date"
          else
            echo "Helm chart docs not up to date:"
            git diff
            exit 1
          fi

  verify-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java
      - name: Run Checkstyle
        run: |
          ./gradlew checkstyleMain checkstyleTest

  verify-javadoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java

      - name: Run Javadoc
        run: ./gradlew javadoc

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - name: Run Unit tests
        run: ./gradlew test

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - name: Run Integration tests
        run: |
          ./gradlew :edc-tests:runtime:mock-connector:dockerize
          ./gradlew test -DincludeTags="ComponentTest"

  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-java

      - name: Run API tests
        run: ./gradlew test -DincludeTags="ApiTest"

  end-to-end-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [
          { dir: edc-tests/edc-controlplane/catalog-tests },
          { dir: edc-tests/edc-controlplane/edr-api-tests },
          { dir: edc-tests/edc-controlplane/iatp-tests },
          { dir: edc-tests/edc-controlplane/policy-tests },
          { dir: edc-tests/edc-controlplane/transfer-tests },
          { dir: edc-tests/edc-controlplane/agreement-retirement-tests },
          { dir: edc-tests/edc-dataplane/edc-dataplane-tokenrefresh-tests },
          { dir: edc-tests/edc-dataplane/cloud-transfer-tests },
          { dir: edc-tests/edc-end2end },
        ]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java

      - name: Run E2E tests (${{ matrix.variant.dir }})
        run: |
          ./gradlew compileJava compileTestJava
          ./gradlew -p ${{ matrix.variant.dir }} test -DincludeTags="EndToEndTest" -PverboseTest=true

      - name: Set sanitized artifact name
        run: |
          SANITIZED_NAME=$(echo "${{ matrix.variant.dir }}" | tr '/' '-')
          echo "ARTIFACT_NAME=${SANITIZED_NAME}" >> $GITHUB_ENV

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ env.ARTIFACT_NAME }}
          path: ${{ matrix.variant.dir }}/build/allure-results

  postgres-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java

      - name: Run Postgresql E2E tests
        run: ./gradlew test -DincludeTags="PostgresqlIntegrationTest" --refresh-dependencies

  generate-allure-report:
    runs-on: ubuntu-latest
    needs: end-to-end-tests
    if: ${{ github.ref_name == 'main' || startsWith(github.ref_name, 'bugfix/') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Generate and publish Allure report
        uses: ./.github/actions/generate-and-publish-allure-report
        with:
          version: ${{ steps.branch-name.outputs.current_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allure_results: allure-results
